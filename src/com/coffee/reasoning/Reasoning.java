// 
// Decompiled by Procyon v0.5.36
// 

package com.coffee.reasoning;

import java.io.IOException;
import java.io.Writer;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.File;
import com.coffee.compiler.Compiler;
import com.coffee.compiler.CompilationParameters;
import com.coffee.compiler.SourceOfCompilation;
import javax.json.JsonObject;

public class Reasoning
{
    public static final String MODEL_NAME = "modelData";
    public static final String MODEL_NAME_AUX = "modelData_Operations.json";
    public static final String SOLVERS_CONFIGURATION_FILE = "CoffeeSolvers";
    public static final String FRONT_END_FILE = "frontEndData";
    public static final String INPUT_FILES_PATH = "tempFiles/InputFiles/";
    public static final String MZN_FILES_PATH = "tempFiles/MZNFiles/";
    public static final String OUTPUT_FILES_PATH = "tempFiles/OutputFiles/";
    
    public JsonObject coffeeCompile(final String dataMzn, final String frontEndData, final String modelData, final int numberOfSolutions) throws Exception {
        saveInputTempFile("tempFiles/InputFiles/", "modelData_Operations.json", modelData);
        saveInputTempFile("tempFiles/MZNFiles/", "modelData.mzn", dataMzn);
        saveInputTempFile("tempFiles/InputFiles/", "frontEndData.json", frontEndData);
        final CompilationParameters params = new CompilationParameters("tempFiles/InputFiles/", "tempFiles/MZNFiles/", "tempFiles/OutputFiles/", "modelData", "CoffeeSolvers", "frontEndData", SourceOfCompilation.FILE);
        final Compiler compiler = new Compiler();
        compiler.setUpCompilation(params);
        final JsonObject solution = compiler.getNSolutionsJson(numberOfSolutions);
        System.out.println(solution.toString());
        return solution;
    }
    
    private static File verifyDirectory(final String dir) {
        final File fileDir = new File(dir);
        if (!fileDir.exists()) {
            fileDir.mkdir();
        }
        return fileDir;
    }
    
    private static void saveInputTempFile(final String currentDir, final String fileName, final String modelContent) throws IOException {
        final File currentFileDir = verifyDirectory(currentDir);
        final File currentModelFile = new File(String.valueOf(currentFileDir.getAbsolutePath()) + "/" + fileName);
        final BufferedWriter bw = new BufferedWriter(new FileWriter(currentModelFile));
        bw.write(modelContent);
        bw.close();
    }
//    
//    public static void main(final String[] ag0) {
//        final String mnz = "% Autogenerated code form the Coffee framework\r\n% Author: avillota\r\n% Variables from elements definitions \r\nvar 0..1: mobilePhone ;\r\nvar 0..1: hardware ;\r\nvar 0..1: videoCall ;\r\nvar 0..1: taskScheduler ;\r\nvar 0..1: games ;\r\nvar 0..1: connector3G ;\r\nvar 0..1: screen ;\r\nvar 0..1: processors ;\r\nvar 0..1: cpu ;\r\nvar 0..1: gpu ;\r\nvar 0..1: ram ;\r\nvar 0..1: gps ;\r\nvar 0..1: chess ;\r\nvar 0..1: carRace ;\r\nvar 0..1: tetris ;\r\n% Variables and constraints from the variability relations definition\r\nconstraint mobilePhone > 0 ;\r\nconstraint mobilePhone > 0 <-> hardware > 0 ;\r\nconstraint videoCall > 0 -> mobilePhone > 0 ;\r\nconstraint taskScheduler > 0 -> mobilePhone > 0 ;\r\nconstraint games > 0 -> mobilePhone > 0 ;\r\n% creating a variable for the attribute\r\nvar 2..8 : videoCall_maxParConn;\r\n% declaring a constraint\r\nconstraint videoCall > 0 <-> videoCall_maxParConn > 0 ;\r\nconstraint hardware > 0 <-> screen > 0 ;\r\nconstraint hardware > 0 <-> processors > 0 ;\r\nconstraint hardware > 0 <-> ram > 0 ;\r\n% creating a variable for the attribute\r\nvar 1..4 : screen_resolution;\r\n% declaring a constraint\r\nconstraint screen > 0 <-> screen_resolution > 0 ;\r\n% creating a variable for the attribute\r\nvar 1..2048 : ram_size;\r\n% declaring a constraint\r\nconstraint ram > 0 <-> ram_size > 0 ;\r\nconstraint connector3G > 0 -> hardware > 0 ;\r\nconstraint gps > 0 -> hardware > 0 ;\r\n% creating a variable for the attribute\r\nvar 2..14 : connector3G_speed;\r\n% declaring a constraint\r\nconstraint connector3G > 0 <-> connector3G_speed > 0 ;\r\nconstraint 1 * games <= chess + carRace + tetris  ;\r\nconstraint chess + carRace + tetris  <= 6 * games ;\r\nconstraint gpu > 0 -> processors > 0 ;\r\n\r\nconstraint ((screen_resolution = 3) /\\ (connector3G_speed >= 6)) ;\r\nvar bool: B0 ;\r\nconstraint (videoCall_maxParConn = 4) -> B0;\r\nconstraint B0  <->  ((screen_resolution = 3) /\\ (connector3G_speed >= 6)) ;\r\n\r\n% The solving parameters from the parameters files\r\n";
//        final String fronendData = "{\r\n \"solverSelected\" : \"\",\r\n \"problemType\":\"BOOL\",\r\n\"configuration\" : \r\n\t{\r\n\t\"DFS\":true,\r\n\t\"mstprim\":false\r\n\t}\r\n}";
//        final String modelData = "{\r\n \"problemType\" : \"INT_ATT\",\r\n\"operationSingle\" : [\"validModel\",\"numberOfConfigurations\"],\r\n\"validConfiguration\" :\r\n[\r\n\t{\r\n\t\"element\" : \"DFS\",\r\n\t\"value\" : \"true\"\r\n\t},\r\n\t{\r\n\t\"element\" : \"mstprim\",\r\n\t\"value\" : \"false\"\r\n\t}\r\n]\r\n}  \r\n";
//        final Reasoning r = new Reasoning();
//        try {
//            r.coffeeCompile(mnz, fronendData, modelData, 2);
//        }
//        catch (Exception e) {
//            e.printStackTrace();
//        }
//    }
}
